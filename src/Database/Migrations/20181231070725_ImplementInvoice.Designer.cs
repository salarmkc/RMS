// <auto-generated />
using System;
using Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(RmsDbContext))]
    [Migration("20181231070725_ImplementInvoice")]
    partial class ImplementInvoice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.Barcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarcodeStuff")
                        .IsRequired();

                    b.Property<string>("Comment");

                    b.Property<bool>("IsDefault");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("StuffId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.ToTable("BarCodes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("CommercialCode");

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("MeasureId");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("NetworkInfoId");

                    b.Property<int>("RegisterCode");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MeasureId");

                    b.HasIndex("NetworkInfoId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("ApplicationCore.Entities.BranchContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("BranchId");

                    b.Property<int>("CityId");

                    b.Property<string>("Comment");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Fax");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Mobile");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<string>("Tel");

                    b.Property<int>("UserId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.ToTable("BranchContacts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.BranchGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<string>("Comment");

                    b.Property<bool>("IsPrimary");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte[]>("Photo")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchGallery");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte[]>("PhotoId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CashDesk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("NetworkInfoId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NetworkInfoId");

                    b.ToTable("CashDesks");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CashDeskUtility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CashDeskId");

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.Property<int?>("UtilityId");

                    b.HasKey("Id");

                    b.HasIndex("CashDeskId");

                    b.HasIndex("UtilityId");

                    b.ToTable("CashDeskUtilities");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("LatinName");

                    b.Property<string>("LegalName");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("NetworkInfoId");

                    b.Property<byte[]>("PhotoId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NetworkInfoId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<string>("Comment");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Fax");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Mobile");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<string>("Tel");

                    b.Property<int>("UserId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseInfoIntroductionId");

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("PersonId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BaseInfoIntroductionId");

                    b.HasIndex("PersonId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Drawer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("OwnerUserId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Drawers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DrawerPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("DrawerId");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("PaymentGroupId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DrawerId");

                    b.HasIndex("PaymentGroupId");

                    b.ToTable("DrawerPayments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Holding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<byte[]>("HoldingLogo");

                    b.Property<string>("HoldingName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("HoldingNameEn")
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HoldingContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<string>("Comment");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Fax");

                    b.Property<int>("HoldingId");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Mobile");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<string>("Tel");

                    b.Property<int>("UserId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HoldingId");

                    b.ToTable("HoldingContacts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ManagementAppMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppMenuId");

                    b.Property<string>("MenuClass")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("MenuUrl");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.HasIndex("AppMenuId");

                    b.ToTable("ManagementAppMenus");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Area");

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PaymentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Comment");

                    b.Property<int>("CurrencyId");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("ParentId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ParentId");

                    b.ToTable("PaymentGroups");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("Key")
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int?>("PermissionParentId");

                    b.Property<int>("Priority");

                    b.Property<bool>("SateIsPage");

                    b.Property<int>("Status");

                    b.Property<string>("Text")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Url")
                        .HasMaxLength(256);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionParentId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Comment");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("PersonGroupId");

                    b.Property<byte[]>("PhotoId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PersonGroupId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<string>("Comment");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Fax");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Mobile");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("PersonId");

                    b.Property<int>("Status");

                    b.Property<string>("Tel");

                    b.Property<int>("UserId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContacts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PersonGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("PersonGroups");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PriceConsumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<decimal>("Price");

                    b.Property<int>("Status");

                    b.Property<int>("StuffId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.ToTable("PriceConsumers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PriceTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<int>("CityId");

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<decimal>("Price");

                    b.Property<int>("Status");

                    b.Property<int>("StuffId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("StuffId");

                    b.ToTable("PriceTags","sale");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("LatinName")
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("RoleGroups");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Share.NetworkInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasMaxLength(29);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Port");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("NetworkInfos","share");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Share.Utility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseInfoColorId");

                    b.Property<int>("BaseInfoNatureId");

                    b.Property<int>("BaseInfoTargetId");

                    b.Property<int?>("CashDeskId");

                    b.Property<string>("Comment");

                    b.Property<string>("MainName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("NetworkInfoId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CashDeskId");

                    b.HasIndex("NetworkInfoId");

                    b.ToTable("Utilities","share");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Share.UtilityDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.Property<int>("UtilityId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UtilityId");

                    b.ToTable("UtilityDetails","share");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.BaseInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseInfoGroupId");

                    b.Property<string>("Comment");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BaseInfoGroupId");

                    b.ToTable("BaseInfos","static");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.BaseInfoGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseInfoGroupName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("BaseInfoGroupText")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("BaseInfoGroups","static");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ProvinceId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities","static");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("CountryCode")
                        .IsRequired();

                    b.Property<string>("ISO")
                        .HasMaxLength(2);

                    b.Property<string>("ISO3")
                        .HasMaxLength(3);

                    b.Property<string>("LatinName")
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Countries","static");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("CountryId");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("DecimalCount");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Currencies","static");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.LogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("LogTypeEnName")
                        .HasMaxLength(256);

                    b.Property<string>("LogTypeName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("LogTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<string>("Comment");

                    b.Property<int>("CountryId");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces","static");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Stuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<string>("Comment");

                    b.Property<string>("LatinName")
                        .HasMaxLength(256);

                    b.Property<int>("ManualCode");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ShortName")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("StuffGroupId");

                    b.Property<int>("StuffUnitId");

                    b.Property<int>("UserId");

                    b.Property<string>("WebUrl");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("StuffGroupId");

                    b.HasIndex("StuffUnitId");

                    b.ToTable("Stuffs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StuffGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ManualCode");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Photo");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("StuffGroups");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StuffSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("StuffId");

                    b.Property<int>("SupplierId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StuffSuppliers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StuffUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.Property<float>("Value");

                    b.HasKey("Id");

                    b.ToTable("StuffUnits");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityCode");

                    b.Property<string>("Comment");

                    b.Property<int>("ManualCode");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Nature");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SupplierContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<string>("Comment");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Fax");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Mobile");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("SupplierId");

                    b.Property<string>("Tel");

                    b.Property<int>("UserId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierContacts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Comment");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("PhoneNumberCount");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("UserGroupId");

                    b.Property<int>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserCashDesk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("RoleId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserCashDesks");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserGroupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("RoleGroupId");

                    b.Property<int>("Status");

                    b.Property<int>("UserGroupId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserGroupRoles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("RelativeId");

                    b.Property<int?>("RelativeId1");

                    b.Property<int>("RoleId");

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RelativeId1");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseInfoActionCode")
                        .IsRequired();

                    b.Property<int?>("BaseInfoId");

                    b.Property<string>("Comment");

                    b.Property<bool>("IsDefault");

                    b.Property<int>("ManualCode");

                    b.Property<int>("MeasureId");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BaseInfoId");

                    b.HasIndex("MeasureId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WarehouseContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<string>("Comment");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("Fax");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Mobile");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<string>("Tel");

                    b.Property<int>("UserId");

                    b.Property<int>("WarehouseId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseContacts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WarehouseStuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("ModByUserId");

                    b.Property<DateTime>("ModDateTime");

                    b.Property<int>("Status");

                    b.Property<int>("StuffId");

                    b.Property<int>("UserId");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseStuffs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Barcode", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Stuff", "Stuff")
                        .WithMany()
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Branch", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId");

                    b.HasOne("ApplicationCore.Entities.Share.NetworkInfo", "NetworkInfo")
                        .WithMany()
                        .HasForeignKey("NetworkInfoId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.BranchContact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Branch", "Branch")
                        .WithMany("BranchContacts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Static.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.BranchGallery", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Branch")
                        .WithMany("BranchGalleries")
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CashDesk", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Share.NetworkInfo", "NetworkInfo")
                        .WithMany()
                        .HasForeignKey("NetworkInfoId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CashDeskUtility", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CashDesk", "CashDesk")
                        .WithMany()
                        .HasForeignKey("CashDeskId");

                    b.HasOne("ApplicationCore.Entities.Share.Utility", "Utility")
                        .WithMany()
                        .HasForeignKey("UtilityId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Share.NetworkInfo", "NetworkInfo")
                        .WithMany()
                        .HasForeignKey("NetworkInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.CompanyContact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany("CompanyContacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Customer", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.BaseInfo", "BaseInfoIntroduction")
                        .WithMany()
                        .HasForeignKey("BaseInfoIntroductionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Drawer", b =>
                {
                    b.HasOne("ApplicationCore.Entities.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.DrawerPayment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Drawer", "Drawer")
                        .WithMany()
                        .HasForeignKey("DrawerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.PaymentGroup", "PaymentGroup")
                        .WithMany()
                        .HasForeignKey("PaymentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.HoldingContact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Holding", "Holding")
                        .WithMany("HoldingContacts")
                        .HasForeignKey("HoldingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ManagementAppMenu", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ManagementAppMenu", "AppMenu")
                        .WithMany()
                        .HasForeignKey("AppMenuId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PaymentGroup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.PersonGroup", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Permission", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Permission", "PermissionParent")
                        .WithMany()
                        .HasForeignKey("PermissionParentId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Person", b =>
                {
                    b.HasOne("ApplicationCore.Entities.PersonGroup", "PersonGroup")
                        .WithMany("Persons")
                        .HasForeignKey("PersonGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.PersonContact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Person", "Person")
                        .WithMany("PersonContacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.PriceConsumer", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Stuff", "Stuff")
                        .WithMany("PriceConsumers")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.PriceTag", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Static.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Stuff", "Stuff")
                        .WithMany()
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.RolePermission", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Share.Utility", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CashDesk")
                        .WithMany("Utilities")
                        .HasForeignKey("CashDeskId");

                    b.HasOne("ApplicationCore.Entities.Share.NetworkInfo", "NetworkInfo")
                        .WithMany()
                        .HasForeignKey("NetworkInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Share.UtilityDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Share.Utility", "Utility")
                        .WithMany("UtilityDetails")
                        .HasForeignKey("UtilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.BaseInfo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.BaseInfoGroup", "BaseInfoGroup")
                        .WithMany()
                        .HasForeignKey("BaseInfoGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.City", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.Currency", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Static.Province", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Stuff", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.StuffGroup", "StuffGroup")
                        .WithMany()
                        .HasForeignKey("StuffGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.StuffUnit", "StuffUnit")
                        .WithMany()
                        .HasForeignKey("StuffUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.StuffSupplier", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Stuff", "Stuff")
                        .WithMany()
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.SupplierContact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Supplier", "Supplier")
                        .WithMany("SupplierContacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.User", b =>
                {
                    b.HasOne("ApplicationCore.Entities.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserCashDesk", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserGroupRole", b =>
                {
                    b.HasOne("ApplicationCore.Entities.RoleGroup", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserRole", b =>
                {
                    b.HasOne("ApplicationCore.Entities.User", "Relative")
                        .WithMany()
                        .HasForeignKey("RelativeId1");

                    b.HasOne("ApplicationCore.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Warehouse", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.BaseInfo", "BaseInfo")
                        .WithMany()
                        .HasForeignKey("BaseInfoId");

                    b.HasOne("ApplicationCore.Entities.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.WarehouseContact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Static.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseContacts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.WarehouseStuff", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Stuff", "Stuff")
                        .WithMany()
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
